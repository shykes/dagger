package main

import (
	"context"
	"fmt"
	"strings"

	"go.opentelemetry.io/otel/codes"
	"golang.org/x/sync/errgroup"

	"github.com/dagger/dagger/.dagger/internal/dagger"
)

func NewGoSDK(
	// +optional
	// +defaultPath="/"
	// +ignore=["!sdk/go"]
	source *dagger.Directory,
	engine Sidecar,
) *GoSDK {
	return &GoSDK{
		Source: source,
		Engine: engine,
	}
}

type GoSDK struct {
	Source *dagger.Directory // +private
	Engine Sidecar           // +private
	Dagger *DaggerDev        // +private
}

// Lint the Go SDK
func (t GoSDK) Lint(ctx context.Context) (rerr error) {
	eg, ctx := errgroup.WithContext(ctx)
	eg.Go(func() (rerr error) {
		ctx, span := Tracer().Start(ctx, "lint the go source")
		defer func() {
			if rerr != nil {
				span.SetStatus(codes.Error, rerr.Error())
			}
			span.End()
		}()
		return dag.
			Go(t.Source).
			Lint(ctx, dagger.GoLintOpts{Packages: []string{"sdk/go"}})
	})
	eg.Go(func() (rerr error) {
		ctx, span := Tracer().Start(ctx, "check that the generated client library is up-to-date")
		defer func() {
			if rerr != nil {
				span.SetStatus(codes.Error, rerr.Error())
			}
			span.End()
		}()
		before := t.Source
		after, err := t.Generate(ctx)
		if err != nil {
			return err
		}
		return dag.Dirdiff().AssertEqual(ctx, before, after, []string{"sdk/go"})
	})
	return eg.Wait()
}

// Test the Go SDK
func (t GoSDK) Test(ctx context.Context) (rerr error) {
	env, err := t.Env(ctx)
	if err != nil {
		return err
	}
	_, err = env.
		WithExec([]string{"go", "test", "-v", "-skip=TestProvision", "./..."}).
		Sync(ctx)
	return err
}

func (t GoSDK) Env(ctx context.Context) (*dagger.Container, error) {
	env := dag.
		Go(t.Source).
		Env().
		WithWorkdir("sdk/go")
	return t.Engine.Bind(ctx, env)
}

// Regenerate the Go SDK API
func (t GoSDK) Generate(ctx context.Context) (*dagger.Directory, error) {
	env, err := t.Env(ctx)
	if err != nil {
		return nil, err
	}
	generated := env.
		WithExec([]string{"go", "generate", "-v", "./..."}).
		WithExec([]string{"go", "mod", "tidy"}).
		Directory(".")
	return dag.Directory().WithDirectory("sdk/go", generated), nil
}

// Test the publishing process
func (t GoSDK) TestPublish(ctx context.Context, tag string) error {
	return t.Publish(
		ctx,
		tag,
		true,
		"https://github.com/dagger/dagger-go-sdk.git",
		"https://github.com/dagger/dagger.git",
		"dagger-ci",
		"hello@dagger.io",
		nil,
	)
}

// Publish the Go SDK
func (t GoSDK) Publish(
	ctx context.Context,
	tag string,

	// +optional
	dryRun bool,

	// +optional
	// +default="https://github.com/dagger/dagger-go-sdk.git"
	gitRepo string,
	// +optional
	// +default="https://github.com/dagger/dagger.git"
	gitRepoSource string,
	// +optional
	// +default="dagger-ci"
	gitUserName string,
	// +optional
	// +default="hello@dagger.io"
	gitUserEmail string,

	// +optional
	githubToken *dagger.Secret,
) error {
	version, isVersioned := strings.CutPrefix(tag, "sdk/go/")

	if err := gitPublish(ctx, gitPublishOpts{
		sdk:          "go",
		source:       gitRepoSource,
		sourceTag:    tag,
		sourcePath:   "sdk/go/",
		sourceFilter: "if [ -f go.mod ]; then go mod edit -dropreplace github.com/dagger/dagger; fi",
		sourceEnv:    dag.Go(t.Source).Env(),
		dest:         gitRepo,
		destTag:      version,
		username:     gitUserName,
		email:        gitUserEmail,
		githubToken:  githubToken,
		dryRun:       dryRun,
	}); err != nil {
		return err
	}

	if isVersioned {
		if err := githubRelease(ctx, githubReleaseOpts{
			tag:         tag,
			notes:       sdkChangeNotes(t.Source, "go", version),
			gitRepo:     gitRepoSource,
			githubToken: githubToken,
			dryRun:      dryRun,
		}); err != nil {
			return err
		}
	}

	return nil
}

// Bump the Go SDK's Engine dependency
func (t GoSDK) Bump(ctx context.Context, version string) (*dagger.Directory, error) {
	// trim leading v from version
	version = strings.TrimPrefix(version, "v")

	versionFile := fmt.Sprintf(`// Code generated by dagger. DO NOT EDIT.

package engineconn

const CLIVersion = %q
`, version)

	// NOTE: if you change this path, be sure to update .github/workflows/publish.yml so that
	// provision tests run whenever this file changes.
	dir := dag.Directory().WithNewFile("sdk/go/internal/engineconn/version.gen.go", versionFile)
	return dir, nil
}
